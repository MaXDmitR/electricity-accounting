// class CalculateAllData {
//     constructor() {
//         this.input = document.getElementById('calculateAllData');   // –ü–æ–ª–µ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏
//         this.button = document.querySelector('.calculateAllData');  // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
//         this.result = document.getElementById('result');            // –ü–æ–ª–µ –¥–ª—è –≤–∏–≤–æ–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
//
//         // userId –º–æ–∂–Ω–∞ –±—Ä–∞—Ç–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∑ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ–≥–æ –ø–æ–ª—è —É DOM
//         this.userId = document.getElementById('userId') ? document.getElementById('userId').value : null;
//
//         if (!this.userId) {
//             console.error("User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É DOM (–µ–ª–µ–º–µ–Ω—Ç –∑ id='userId')");
//         }
//
//         this.button.addEventListener('click', () => this.handleClick());
//     }
//
//     async handleClick() {
//         const date = this.input.value.trim();
//         if (!date) {
//             this.showResult("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É.", "error");
//             return;
//         }
//
//         if (!this.userId) {
//             this.showResult("‚ùå User ID –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ.", "error");
//             return;
//         }
//
// // –î–æ–¥–∞—Ç–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É –∫–ª–∞—Å—É (–º–æ–∂–Ω–∞ –ø—ñ—Å–ª—è constructor –∞–±–æ –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ handleClick)
//         const MAX_RESERVATION_ENERGY = 15000;
//         try {
//             const data = await this.loadAllData(date, this.userId);
//
//             if (!data.diapason || !data.electricity_calculated || !data.hourly_prices) {
//                 this.showResult("‚ö†Ô∏è –ù–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É.", "warning");
//                 return;
//             }
//
//             // –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, electricity_calculated ‚Äî –æ–±'—î–∫—Ç –∑ –∫–ª—é—á–∞–º–∏ hour1..hour24
//             // –§–æ—Ä–º—É—î–º–æ –º–∞—Å–∏–≤ –ø–æ—Ç—É–∂–Ω–æ—Å—Ç–µ–π –ø–æ –≥–æ–¥–∏–Ω–∞—Ö (0..23)
//             const calculatedArray = [];
//             for(let h=1; h<=24; h++) {
//                 const key = 'hour' + h;
//                 calculatedArray.push(data.electricity_calculated[key] || 0);
//             }
//
//             // –ú–∞—Å–∏–≤ —Ü—ñ–Ω –∑–∞ –≥–æ–¥–∏–Ω–∞–º–∏ (24 –µ–ª–µ–º–µ–Ω—Ç–∏)
//             const hourlyPrices = data.hourly_prices; // –æ—á—ñ–∫—É—î–º–æ –º–∞—Å–∏–≤ –∑ 24 —á–∏—Å–µ–ª
//             if (hourlyPrices.length !== 24) {
//                 this.showResult("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≥–æ–¥–∏–Ω–Ω–∏—Ö —Ü—ñ–Ω (–º–∞—î –±—É—Ç–∏ 24).", "error");
//                 return;
//             }
//
//             // –Ü–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—è –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ –ø–æ —Ö–≤–∏–ª–∏–Ω–∞—Ö –¥–ª—è 24 –≥–æ–¥–∏–Ω
//             const dataPoints = calculatedArray.map((power, idx) => ({
//                 timeMinutes: idx * 60,
//                 power
//             }));
//
//             const energyPerMinute = this.calculateEnergyPerMinuteArray(dataPoints);
//             const totalEnergy = energyPerMinute.reduce((sum, e) => sum + e, 0);
//
//             // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —ñ–∑ diapason
//             const diapason = data.diapason;
//
//             // –í—ñ–¥—Å–æ—Ç–∫–∏ –±–µ—Ä–µ–º–æ –∑ diapason –∞–±–æ —Å—Ç–∞–≤–∏–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ
//             const salePercentage = diapason.salePercentage ?? 50;
//             const reservationPercentage = diapason.reservePercentage ?? 50;
//
//             if (salePercentage + reservationPercentage !== 100) {
//                 this.showResult("‚ùå –°—É–º–∞ –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤ (–ø—Ä–æ–¥–∞–∂ + —Ä–µ–∑–µ—Ä–≤) –º–∞—î –±—É—Ç–∏ 100%.", "error");
//                 return;
//             }
//
//             // –í–∏—Ç—Ä–∞—á–µ–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è (–ø—Ä–∏–ø—É—Å—Ç–∏–º–æ, amount_energy_spent —É –∫–í—Ç¬∑–≥–æ–¥)
//             const spentEnergy = diapason.amountEnergySpent / 1000 ?? 0;
//
//             // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –ø—Ä–æ–¥–∞–∂—É
//             const saleEnergyPerMinute = energyPerMinute.map(e => e * (salePercentage / 100));
//             const saleIncome = saleEnergyPerMinute.reduce((sum, energy, minute) => {
//                 const hour = Math.floor(minute / 60);
//                 const pricePerKWh = hourlyPrices[hour] / 1000; // —Ü—ñ–Ω–∞ –∑–∞ 1 –∫–í—Ç¬∑–≥–æ–¥
//                 return sum + (energy * pricePerKWh);
//             }, 0);
//
//             const saleEnergy = totalEnergy * (salePercentage / 100);
//             const reservationEnergy = totalEnergy * (reservationPercentage / 100);
//             const reservationPricePerKWh = 2.3; // —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞ —Ü—ñ–Ω–∞ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è
//             const reservationCost = reservationEnergy * reservationPricePerKWh;
//
//             this.showResult(`
//                 ‚úÖ <b>–î–∞—Ç–∞:</b> ${date} <br>
//                 üìä <b>–ó–∞–≥–∞–ª—å–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è:</b> ${totalEnergy.toFixed(3)} –∫–í—Ç¬∑–≥–æ–¥ <br>
//                 üîã <b>–í–∏—Ç—Ä–∞—á–µ–Ω–æ:</b> ${spentEnergy.toFixed(3)} –í—Ç¬∑–≥–æ–¥ <br>
//                 üí∞ <b>–ü—Ä–æ–¥–∞–∂ (${salePercentage}%):</b> ${saleEnergy.toFixed(3)} –∫–í—Ç¬∑–≥–æ–¥ <br>
//                 üíµ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ–¥–∞–∂—É:</b> ${saleIncome.toFixed(2)} –≥—Ä–Ω <br>
//                 üõë <b>–†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è (${reservationPercentage}%):</b> ${reservationEnergy.toFixed(3)} –∫–í—Ç¬∑–≥–æ–¥ <br>
//                 üí∏ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤—É:</b> ${reservationCost.toFixed(2)} –≥—Ä–Ω <br>
//             `, "success");
//
//         } catch (error) {
//             console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —á–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö:', error);
//             this.showResult("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤.", "error");
//         }
//     }
//
//     async loadAllData(date, userId) {
//         console.log("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –¥–∞—Ç–∏:", date);
//         const response = await fetch(`/api/calculate-data?date=${encodeURIComponent(date)}&user_id=${encodeURIComponent(userId)}`);
//         if (!response.ok) throw new Error(`HTTP –ø–æ–º–∏–ª–∫–∞: ${response.status}`);
//
//         return await response.json();
//     }
//
//     interpolatePowerAtMinute(dataPoints, targetMinute) {
//         if (dataPoints.length === 0) return 0;
//
//         const exact = dataPoints.find(({ timeMinutes }) => timeMinutes === targetMinute);
//         if (exact) return exact.power;
//
//         const before = [...dataPoints].reverse().find(({ timeMinutes }) => timeMinutes < targetMinute);
//         const after = dataPoints.find(({ timeMinutes }) => timeMinutes > targetMinute);
//
//         if (!before && !after) return 0;
//         if (!before) return after.power;
//         if (!after) return before.power;
//
//         const ratio = (targetMinute - before.timeMinutes) / (after.timeMinutes - before.timeMinutes);
//         return before.power + ratio * (after.power - before.power);
//     }
//
//     calculateEnergyPerMinuteArray(dataPoints) {
//         const energyPerMinute = [];
//         for (let minute = 0; minute < 1440; minute++) {
//             const interpolatedPower = this.interpolatePowerAtMinute(dataPoints, minute);
//             energyPerMinute.push(interpolatedPower / 60); // –∫–í—Ç¬∑–≥–æ–¥ –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É
//         }
//         return energyPerMinute;
//     }
//
//     showResult(message, type) {
//         let color = "#f1f1f1";
//         if (type === "error") color = "red";
//         else if (type === "success") color = "green";
//         else if (type === "warning") color = "orange";
//
//         this.result.style.color = color;
//         this.result.innerHTML = message;
//     }
// }
//
// document.addEventListener("DOMContentLoaded", function () {
//     // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—ñ
//     ["#calculateAllData", "#firstUserDate", "#secondUserDate"].forEach(selector => {
//         flatpickr(selector, { locale: "uk", dateFormat: "d.m.Y" });
//     });
//
//     // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ –∫–ª–∞—Å —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
//     new CalculateAllData();
// });

class CalculateAllData {
    constructor() {
        this.input = document.getElementById('calculateAllData');
        this.button = document.querySelector('.calculateAllData');
        this.result = document.getElementById('result');
        this.userId = document.getElementById('userId') ? document.getElementById('userId').value : null;

        if (!this.userId) {
            console.error("User ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É DOM (–µ–ª–µ–º–µ–Ω—Ç –∑ id='userId')");
        }

        this.button.addEventListener('click', () => this.handleClick());
    }

    async handleClick() {
        const MAX_RESERVATION_ENERGY = 15000;

        const date = this.input.value.trim();
        if (!date) {
            this.showResult("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É.", "error");
            return;
        }

        if (!this.userId) {
            this.showResult("‚ùå User ID –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ.", "error");
            return;
        }

        try {
            const data = await this.loadAllData(date, this.userId);

            if (!data.diapasons || !Array.isArray(data.diapasons) || !data.electricity_calculated || !data.hourly_prices) {
                this.showResult("‚ö†Ô∏è –ù–µ–ø–æ–≤–Ω—ñ –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É.", "warning");
                return;
            }

            const calculatedArray = [];
            for (let h = 1; h <= 24; h++) {
                const key = 'hour' + h;
                calculatedArray.push(data.electricity_calculated[key] || 0);
            }

            const hourlyPrices = data.hourly_prices;
            if (hourlyPrices.length !== 24) {
                this.showResult("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≥–æ–¥–∏–Ω–Ω–∏—Ö —Ü—ñ–Ω (–º–∞—î –±—É—Ç–∏ 24).", "error");
                return;
            }

            const dataPoints = calculatedArray.map((power, idx) => ({
                timeMinutes: idx * 60,
                power
            }));

            const energyPerMinute = this.calculateEnergyPerMinuteArray(dataPoints);
            const totalEnergy = energyPerMinute.reduce((sum, e) => sum + e, 0);

            let totalSaleEnergy = 0;
            let totalReservationEnergy = 0;
            let totalSaleIncome = 0;
            let totalReservationCost = 0;

            const reserveLimitPerMinute = MAX_RESERVATION_ENERGY / 1440;

            let diapasonsSpentEnergyInfo = '';

            for (const diapason of data.diapasons) {
                const salePercentage = diapason.salePercentage ?? 50;
                const reservationPercentage = diapason.reservePercentage ?? 50;

                if (salePercentage + reservationPercentage !== 100) {
                    this.showResult("‚ùå –£ –æ–¥–Ω–æ–º—É –∑ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ–≤ —Å—É–º–∞ –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤ ‚â† 100%.", "error");
                    return;
                }

                const diapasonSpentEnergy = (diapason.amountEnergySpent ?? 0) / 1000; // –í –∫–í—Ç¬∑–≥–æ–¥

                diapasonsSpentEnergyInfo += `üìâ <b>–í–∏—Ç—Ä–∞—á–µ–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è –¥—ñ–∞–ø–∞–∑–æ–Ω—É:</b> ${diapasonSpentEnergy.toFixed(3)} –∫–í—Ç¬∑–≥–æ–¥<br>`;

                let saleEnergy = totalEnergy * (salePercentage / 100);
                let reservationEnergy = totalEnergy * (reservationPercentage / 100);

                // –û—Å—å —Ç—É—Ç –∫–ª—é—á–æ–≤–µ –æ–±–º–µ–∂–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤—É:
                const remainingReservation = MAX_RESERVATION_ENERGY - totalReservationEnergy;
                const allowedReservation = Math.min(reservationEnergy, remainingReservation);

                const excess = reservationEnergy - allowedReservation;
                reservationEnergy = allowedReservation;
                saleEnergy += excess;

                const saleEnergyPerMinute = energyPerMinute.map(e => {
                    const baseSale = e * (salePercentage / 100);
                    const reserve = e * (reservationPercentage / 100);
                    const excessReserve = Math.max(0, reserve - reserveLimitPerMinute);
                    return baseSale + excessReserve;
                });

                const saleIncome = saleEnergyPerMinute.reduce((sum, energy, minute) => {
                    const hour = Math.floor(minute / 60);
                    const pricePerKWh = hourlyPrices[hour] / 1000;
                    return sum + (energy * pricePerKWh);
                }, 0);

                const reservationPricePerKWh = 2.3;
                const reservationCost = reservationEnergy * reservationPricePerKWh;

                totalSaleEnergy += saleEnergy;
                totalReservationEnergy += reservationEnergy;
                totalSaleIncome += saleIncome;
                totalReservationCost += reservationCost;
            }

            this.showResult(`
                ‚úÖ <b>–î–∞—Ç–∞:</b> ${date} <br>
                üìä <b>–ó–∞–≥–∞–ª—å–Ω–∞ –µ–Ω–µ—Ä–≥—ñ—è:</b> ${totalEnergy.toFixed(3)} –∫–í—Ç¬∑–≥–æ–¥ <br>
                ${diapasonsSpentEnergyInfo}
                üí∞ <b>–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–¥–∞–∂:</b> ${totalSaleEnergy.toFixed(3)} –∫–í—Ç¬∑–≥–æ–¥ <br>
                üíµ <b>–î–æ—Ö–æ–¥–∏ –≤—ñ–¥ –ø—Ä–æ–¥–∞–∂—É:</b> ${totalSaleIncome.toFixed(2)} –≥—Ä–Ω <br>
                üõë <b>–ó–∞–≥–∞–ª—å–Ω–µ —Ä–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è:</b> ${totalReservationEnergy.toFixed(3)} –∫–í—Ç¬∑–≥–æ–¥ <br>
                üí∏ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤—É:</b> ${totalReservationCost.toFixed(2)} –≥—Ä–Ω <br>
            `, "success");

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —á–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö:', error);
            this.showResult("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤.", "error");
        }
    }

    async loadAllData(date, userId) {
        console.log("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –¥–∞—Ç–∏:", date);
        const response = await fetch(`/api/calculate-data?date=${encodeURIComponent(date)}&user_id=${encodeURIComponent(userId)}`);
        if (!response.ok) throw new Error(`HTTP –ø–æ–º–∏–ª–∫–∞: ${response.status}`);
        return await response.json();
    }

    interpolatePowerAtMinute(dataPoints, targetMinute) {
        if (dataPoints.length === 0) return 0;

        const exact = dataPoints.find(({ timeMinutes }) => timeMinutes === targetMinute);
        if (exact) return exact.power;

        const before = [...dataPoints].reverse().find(({ timeMinutes }) => timeMinutes < targetMinute);
        const after = dataPoints.find(({ timeMinutes }) => timeMinutes > targetMinute);

        if (!before && !after) return 0;
        if (!before) return after.power;
        if (!after) return before.power;

        const ratio = (targetMinute - before.timeMinutes) / (after.timeMinutes - before.timeMinutes);
        return before.power + ratio * (after.power - before.power);
    }

    calculateEnergyPerMinuteArray(dataPoints) {
        const energyPerMinute = [];
        for (let minute = 0; minute < 1440; minute++) {
            const interpolatedPower = this.interpolatePowerAtMinute(dataPoints, minute);
            energyPerMinute.push(interpolatedPower / 60);
        }
        return energyPerMinute;
    }

    showResult(message, type) {
        let color = "#f1f1f1";
        if (type === "error") color = "red";
        else if (type === "success") color = "green";
        else if (type === "warning") color = "orange";

        this.result.style.color = color;
        this.result.innerHTML = message;
    }
}

document.addEventListener("DOMContentLoaded", function () {
    ["#calculateAllData", "#firstUserDate", "#secondUserDate"].forEach(selector => {
        flatpickr(selector, { locale: "uk", dateFormat: "d.m.Y" });
    });

    new CalculateAllData();
});
